#+LATEX_HEADER: \usepackage[margin=0.1in]{geometry}
#+OPTIONS: toc:nil
#+TITLE:
\setlength{\parindent}{0em}
* resumen


** Segmentación
Esquema de segmentacion flat. 4 segmentos, 2 de codigo con nivel
(DPL) 0 y 3 y dos de datos, con nivel 0 y 3. No usaremos LDT si
 no sólo la GDT. La GDT tendrá una entrada nula y además las
entradas para las TSSs. Las primeras entradas de la GDT tendrán:
 (Base=0, G=1, Límite=lim, P=1, S=1). 
Seg-codigo-sys: (DLP=0, Type=0xA), Seg-datos-sys (DPL=0, Type=2)
Seg-codigo-usr: (DLP=3, Type=0xA), Seg-datos-usr (DPL=3, Type=2),
donde lim sera el mismo para todo y dependera del tamaño de la
memoria...
MAX_ADDR = limite * 0x1000 + 0xFFF

** Paging (32 bits)
Número de entradas en PD y PT: 1024 = 2^10 ; 
Tamaño de cada entrada: 32 bits = 4 bytes ; 
Tamaño de página: 4kb = 2^12 bytes.
Por cada tarea un directorio de paginas con X tabla
*** Ejemplo inicializo tarea: 
*Mapeo de kernel con Identity mapping* (PDEs: P = 1, R/W = 1, U/S = 0
 resto 0; PTE: P = 1, R/W = 1, U/S = 0, resto 0).
*mapeo codigo tarea*: P = 1, R/W = 0,  U/S = 1
*mapeo datos tarea*: P = 1, R/W = 1,  U/S = 1
*mapeo pila nivel 3 tarea*: P=1, R/W=1, U/S=1
*mapeo pila nivel 0 tarea*: P=1, R/W=1, U/S=0

*CR3*:Address of page directory. Los 12 bits menos significativos 
se asumen que son 0.

*Page Directory Entry (PDE)*
*Address of page table*: los 12 bits menos significativos se asumen
 que son 0.
*R/W*: Si se puede escribir o leer y escribir. Si el bit WP del CR0
 esta en 0, el kernel siempre puede escribir.
*U/S*: Si es 0, solo si tenes un CPL = 0 podes tocar estas páginas.
*A*: Accessed. Si fue leída o escrita alguna página a la que apunta
 esto. La desetea el SO.
*G*: Global. Ignorado.
*D*: Dirty. Si fue escrita alguna página a la que apunta esto.

*Page Table Entry (PTE)*
*D*: Dirty. Si fue escrita alguna página a la que apunta esto. 
La dessetea el SO. *A, U/S, R/W*: Lo mismo que en el PDE. 

*Dirección logica -> virtual -> física*
*Modo real*: ~logica = selector_de_segmento:offset~

~; fisica = selector_de_segmento << 4 + offset~
*Modo protegido*
#+BEGIN_SRC
logica = selector_de_segmento:offset
selector_de_segmento[0:1] = RPL = requested priviledge level.
selector_de_segmento[2] = TI = Si es 1, el segmento esta en la LDT. Sino, en la GDT.
selector_de_segmento[3:15] = índice en la GDT/LDT.
entrada_GDT = GDTR + selector_de_segmento.indice 
virtual = entrada_GDT.Base + logica.offset

virtual[0:11] = offset
virtual[12:21] = table
virtual[22:31] = directory
directory_entry = CR3 + virtual.directory
page_table_entry = directory_entry.address + virtual.table
fisica = page_table_entry.address + virtual.offset 
#+END_SRC

** Tareas
Por cada tarea se necesita una TSS en memoria, que se carga en la
GDT. Es necesaria 1 para la tarea inicial, puede ser necesaria
una idle, y luego uan para cada tarea de usuario.

EIP y ESP deben ser posiciones válidas. eflags = ~0x202~ con 
interrupciones, ~0x2~ sin. iomap = ~0xFFFF~

** Interrupciones
Necesitaremos cargar una IDT con entradas para todas las excepciones
 del procesador y (si piden) la interrupcion del reloj (32) etc.
Todos los descriptores tendran P = 1, DPL = 0 y 
selector de segmento = 0x8. Se asume PIC ya configurado.

*IDTR*
~idtr[0:15] = limit  ;~
~idtr[16:47] = base = direccion lineal en donde empieza la IDT~

