#+LATEX_HEADER: \usepackage[margin=0.1in]{geometry}
#+OPTIONS: toc:nil
#+TITLE:
* resumen

** Descriptores de la GDT
#+ATTR_HTML: :width 50% :height 50% 
[[./imagenes/segment-descriptor.png]]

#+ATTR_HTML: :width 50% :height 50% 
[[./imagenes/code-and-data-segment-types.png]]

** TSS
#+ATTR_HTML: :width 50% :height 50% 
[[./imagenes/32bit-TSS.png]]

Por cada tarea se necesita una TSS en memoria, que se 
carga en la GDT.

Es necesaria 1 para la tarea inicial, puede ser necesaria
una idle, y luego uan para cada tarea de usuario.

EIP y ESP deben ser posiciones válidas.

eflags = ~0x202~ con interrupciones, ~0x2~ sin

iomap = ~0xFFFF~

** Paging (32 bits)
Número de entradas en PD y PT: 1024 = 2^10 ; 
Tamaño de cada entrada: 32 bits = 4 bytes ; 
Tamaño de página: 4kb = 2^12 bytes

*** Ejemplo: 
**** Mapeo de kernel:
PDEs: P = 1, R/W = ?, U/S = ?, PWT = 0, PCD = 0, A = 0, PS = 0
PTE: P = 1, R/W = 0, U/S = 0, PWT = 0, PCD = 0, A = 0, D = 0, PAT = 0, G = 0


*** Estructuras
#+ATTR_HTML: :width 50% :height 50% 
[[./imagenes/CR3-PDE-PTE.png]]

**** CR3

- *Address of page directory*: los 12 bits menos significativos se asumen que son 0.

**** Page Directory Entry (PDE)

- *Address of page table*: los 12 bits menos significativos se asumen que son 0.
- *R/W*: Si se puede escribir o leer y escribir. Si el bit WP del CR0 esta en 0, el kernel siempre puede escribir.
- *U/S*: Si es 0, solo si tenes un CPL = 0 podes tocar estas páginas.
- *A*: Accessed. Si fue leída o escrita alguna página a la que apunta esto. La dessetea el SO.
- *G*: Global. Ignorado.
- *D*: Dirty. Si fue escrita alguna página a la que apunta esto.

**** Page Table Entry (PTE)
- *D*: Dirty. Si fue escrita alguna página a la que apunta esto. La dessetea el SO.
- *A, U/S, R/W*: Lo mismo que en el PDE. 
- *G*: Ignorado.



*** Dirección logica -> virtual -> física
**** Modo real
#+BEGIN_SRC
logica = selector_de_segmento:offset
fisica = selector_de_segmento << 4 + offset
#+END_SRC

**** Modo protegido
#+BEGIN_SRC
logica = selector_de_segmento:offset
selector_de_segmento[0:1] = RPL = requested priviledge level.
selector_de_segmento[2] = TI = Si es 1, el segmento esta en la LDT. Sino, en la GDT.
selector_de_segmento[3:15] = índice en la GDT/LDT.
entrada_GDT = GDTR + selector_de_segmento.indice 
virtual = entrada_GDT.Base + logica.offset

virtual[0:11] = offset
virtual[12:21] = table
virtual[22:31] = directory
directory_entry = CR3 + virtual.directory
page_table_entry = directory_entry.address + virtual.table
fisica = page_table_entry.address + virtual.offset 
#+END_SRC

** IDT
*** IDTR
#+BEGIN_SRC
idtr[0:15] = limit
idtr[16:47] = base = direccion lineal en donde empieza la IDT 
#+END_SRC
Se carga poniendo en algún lugar del código:
#+BEGIN_SRC
idt_info:
    dw idt_end - idt_start - 1
    dd idt_start
#+END_SRC
Y después:
#+BEGIN_SRC
lidt [idt_info]
#+END_SRC

*** IDT Entry Descriptor
#+BEGIN_SRC C
struct IDTDescr {
   uint16_t offset_1; // offset bits 0..15
   uint16_t selector; // a code segment selector in GDT or LDT
   uint8_t zero;      // unused, set to 0
   uint8_t type_attr; // type and attributes, see below
   uint16_t offset_2; // offset bits 16..31
};
#+END_SRC
~type_attr~:
#+BEGIN_SRC
  7                           0
+---+---+---+---+---+---+---+---+
| P |  DPL  | S |    GateType   |
+---+---+---+---+---+---+---+---+
P = present
DPL = Descriptor Priviledge Level = el nivel de privilegios mínimo que tiene
que tener el descriptor que llama para que lo pueda hacer.
S = 0 para interrupt y trap gates   
GateType = si 0x5 => 32-bit task gate
           si 0x6 => 16-bit interrupt gate
           si 0x7 => 16-bit trap gate
           si 0xE => 32-bit interrupt gate
           si 0xF => 32-bit trap gate
#+END_SRC
